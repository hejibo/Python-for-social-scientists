ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
S'C:\\Users\\admin\\Desktop\\frank_psychopy_test\\stroop_data_save\\stroop.psyexp'
p7
sS'dataFileName'
p8
VC:\u005cUsers\u005cadmin\u005cDesktop\u005cfrank_psychopy_test\u005cstroop_data_save\u005cdata\u005c_2015_Nov_16_1222
p9
sS'runtimeInfo'
p10
NsS'name'
p11
S'stroop'
p12
sS'dataNames'
p13
(lp14
sS'autoLog'
p15
I01
sS'extraInfo'
p16
(dp17
VEye Tracker
p18
Vtobii_std.yaml
p19
sS'date'
p20
V2015_Nov_16_1222
p21
sS'expName'
p22
g12
sVParticipant
p23
V
sS'frameRate'
p24
cnumpy.core.multiarray
scalar
p25
(cnumpy
dtype
p26
(S'f8'
I0
I1
tRp27
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xacD\xdb9\x1e\xf2M@'
tRp28
ssS'loopsUnfinished'
p29
(lp30
g1
(cpsychopy.data
TrialHandler
p31
g3
NtRp32
(dp33
S'origin'
p34
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="u'data' + os.sep + '%s_%s' %(expInfo['Participant'], expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="black" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1280, 800]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'Eye Tracker': u'tobii_std.yaml', u'Participant': u''}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="stroop" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="fixation">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="+" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="1.0" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial">\u000a      <TextComponent name="stimulus">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="$stimColor" valType="str" updates="set every repeat"/>\u000a        <Param name="text" val="$stimText" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="10" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="5" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="resp">\u000a        <Param name="correctAns" val="$corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="resp" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="10" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="&quot;left&quot;,&quot;down&quot;,&quot;right&quot;" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <CodeComponent name="eye_track_code">\u000a        <Param name="Begin Experiment" val="import csv&#10;&#10;#Lets have a flag to say our header has not been written to gaze data file&#10;header_written = False&#10;&#10;eyetracker =False#will change if we get one!&#10;&#10;if expInfo['Eye Tracker']:&#10;    from psychopy.iohub import EventConstants,ioHubConnection,load,Loader&#10;    from psychopy.data import getDateStr&#10;    # Load the specified iohub configuration file converting it to a python dict.&#10;    io_config=load(file(expInfo['Eye Tracker'],'r'), Loader=Loader)&#10;&#10;    # Add / Update the session code to be unique. Here we use the psychopy getDateStr() function for session code generation&#10;    session_info=io_config.get('data_store').get('session_info')&#10;    session_info.update(code=&quot;S_%s&quot;%(getDateStr()))&#10;&#10;    # Create an ioHubConnection instance, which starts the ioHubProcess, and informs it of the requested devices and their configurations.&#10;    io=ioHubConnection(io_config)&#10;&#10;    iokeyboard=io.devices.keyboard&#10;    mouse=io.devices.mouse&#10;    if io.getDevice('tracker'):&#10;        eyetracker=io.getDevice('tracker')&#10;        #Make smaller screen and minimize&#10;        win.fullscr = False&#10;        win.flip()&#10;        win.winHandle.minimize()&#10;        win.flip()&#10;        &#10;        #Run our calibration&#10;        eyetracker.runSetupProcedure()&#10;        &#10;        #Once complete, bring our exp screen back&#10;        win.fullscr = True&#10;        win.winHandle.activate()&#10;        win.winHandle.maximize()&#10;&#10;    x,y=0,0&#10;&#10;&#10;#Now lets open up a data file to save our Gaze data&#10;file_name = u'data' + os.sep + str(expInfo['Participant'])+&quot;_&quot;+str(expInfo['date'])+&quot;_gazedata.csv&quot;&#10;&#10;gaze_file = open(file_name, &quot;wb&quot;)&#10;writer = csv.writer(gaze_file)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="eye_track_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if eyetracker:&#10;    #Clear any events ready to start recording&#10;    io.clearEvents('all')&#10;    #Now fetch some data at the start of the routine.&#10;    eyetracker.setRecordingState(True)&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="#If we had an eye tracker available, then lets dump out our data that should have been recorded&#10;if eyetracker:&#10;    #Here is what we captured during the recording...&#10;    outdata = eyetracker.getEvents()&#10;    &#10;    #Lets say that we are not recording now&#10;    eyetracker.setRecordingState(False)&#10;&#10;    #append any new data&#10;    for index, row in enumerate(outdata):&#10;        #dict_temp = dict((name, getattr(row, name)) for name in dir(row) if not name.startswith('__'))&#10;        dict_temp = row._asdict()&#10;&#10;        #ADD IN OUR NEW DATA HERE QUICKLY&#10;        dict_temp.update({'stim_colour': stimColor})&#10;        &#10;        #Have we written the header yet?&#10;        if header_written == False:&#10;            writer.writerow(dict_temp.keys())&#10;            header_written = True #Dont do it again!&#10;        &#10;        #Write out data row&#10;        writer.writerow(dict_temp.values())" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="if eyetracker:&#10;    eyetracker.setConnectionState(False)&#10;    io.quit()&#10;    gaze_file.close()" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="instruct">\u000a      <TextComponent name="instrText">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="instrText" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="800" valType="code" updates="constant"/>\u000a        <Param name="color" val="$[1, 1, 1]" valType="str" updates="constant"/>\u000a        <Param name="text" val="OK. Ready?&#10;&#10;Remember:&#13;&#10;1) Stay fixated on the central white dot.&#13;&#10;2) Ignore the word itself; press:&#10;&#9;- Left for red LETTERS&#10;&#9;- Down for green LETTERS&#10;&#9;- Right for blue LETTERS&#10;&#9;- (Esc will quit)&#10;&#10;Press any key to continue" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="ready">\u000a        <Param name="correctAns" val="thisTrial.corrAns" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="ready" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="thanks">\u000a      <TextComponent name="thanksText">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="thanksText" valType="code" updates="constant"/>\u000a        <Param name="wrapWidth" val="800" valType="code" updates="constant"/>\u000a        <Param name="color" val="$[1, 1, 1]" valType="str" updates="constant"/>\u000a        <Param name="text" val="This is the end of the experiment.&#10;&#10;Thanks!" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="2.0" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="instruct"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trialTypes.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="num" updates="None"/>\u000a      <Param name="endPoints" val="[1, 2]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'stimColor': u'red', u'stimText': u'red', u'congruent': 1, u'corrAns': u'left'}, {u'stimColor': u'green', u'stimText': u'red', u'congruent': 0, u'corrAns': u'down'}, {u'stimColor': u'green', u'stimText': u'green', u'congruent': 1, u'corrAns': u'down'}, {u'stimColor': u'blue', u'stimText': u'green', u'congruent': 0, u'corrAns': u'right'}, {u'stimColor': u'blue', u'stimText': u'blue', u'congruent': 1, u'corrAns': u'right'}, {u'stimColor': u'red', u'stimText': u'blue', u'congruent': 0, u'corrAns': u'left'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="fixation"/>\u000a    <Routine name="trial"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="thanks"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p35
sS'thisTrial'
p36
g1
(cpsychopy.data
TrialType
p37
c__builtin__
dict
p38
(dp39
VstimColor
p40
Vgreen
p41
sVstimText
p42
Vred
p43
sVcongruent
p44
I0
sVcorrAns
p45
Vdown
p46
stRp47
sS'_exp'
p48
I152959792
sg11
S'trials'
p49
sg6
g7
sS'thisRepN'
p50
I0
sg15
I01
sg16
g17
sS'data'
p51
g1
(cpsychopy.data
DataHandler
p52
g38
(dp53
S'ran'
p54
cnumpy.ma.core
_mareconstruct
p55
(cnumpy.ma.core
MaskedArray
p56
cnumpy
ndarray
p57
(I0
tp58
S'b'
tRp59
(I1
(I2
I3
tg26
(S'f4'
I0
I1
tRp60
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p61
g55
(g56
g57
g58
S'b'
tRp62
(I1
(I2
I3
tg60
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x01\x01\x01\x00\x01\x01'
NtbstRp63
(dp64
S'isNumeric'
p65
(dp66
g54
I01
sg61
I01
ssg49
g32
sS'dataTypes'
p67
(lp68
g54
ag61
asS'dataShape'
p69
(lp70
I2
aI3
asbsS'method'
p71
S'random'
p72
sS'sequenceIndices'
p73
cnumpy.core.multiarray
_reconstruct
p74
(g57
(I0
tS'b'
tRp75
(I1
(I2
I3
tg26
(S'i4'
I0
I1
tRp76
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p77
I00
sS'nReps'
p78
I3
sS'nRemaining'
p79
I5
sS'trialList'
p80
(lp81
g1
(g37
g38
(dp82
g40
g43
sg42
g43
sg44
I1
sg45
Vleft
p83
stRp84
ag47
asS'seed'
p85
NsS'thisIndex'
p86
g25
(g76
S'\x01\x00\x00\x00'
tRp87
sS'thisN'
p88
I0
sS'thisTrialN'
p89
I0
sS'nTotal'
p90
I6
sS'_warnUseOfNext'
p91
I01
sbasS'saveWideText'
p92
I01
sS'thisEntry'
p93
(dp94
sS'version'
p95
S''
sS'_paramNamesSoFar'
p96
(lp97
sS'entries'
p98
(lp99
sS'loops'
p100
(lp101
g32
asS'savePickle'
p102
I00
sb.